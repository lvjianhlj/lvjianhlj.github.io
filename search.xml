<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>求最大子矩阵的大小</title>
      <link href="/2018/07/18/getNum/"/>
      <url>/2018/07/18/getNum/</url>
      <content type="html"><![CDATA[<p>【题目】</p><p>　　给定数组arr和整数num，共返回有多少个子数组满足如下情况：子数组中的最大值减去最小值小于或等于num。<br>　　要求，时间复杂度O(N)。</p><p>【基本思路】</p><p>　　首先明确两点：<br>　　<br>　　1、如果子数组arr[i…j]满足条件，那么arr[i…j]中的子数组一定也满足条件。<br>　　2、如果子数组arr[i…j]不满足条件，那么包含arr[i…j]的子数组一定也不满足条件。</p><p>　　使用两个双端队列qmin和qmax，qmin用来维护子数组arr[i…j]的最小值更新，qmax用来维护子数组arr[i…j]的最大值更新。队头表示的就是子数组arr[i…j]的最小（大）值。生成两个整型变量i和j，用于表示子数组的范围，即arr[i…j]。整型变量res表示所有满足条件的子数组数量。初始时，i、j、res都为0。</p><p>　　令j不断向右移动，表示arr[i…j]一直向右扩张，并不断更新qmin和qmax。一旦出现arr[i…j]不满足条件的情况，扩张停止，此时arr[i…j-1]、arr[i…j-2]、arr[i…j-3]……arr[i…i]一定满足条件。即所有必须以arr[i]开头的满足条件的子数组数量为j - i。所以令 res += j - i。</p><p>　　向右扩张停止后，令i向右移动一个单位，表示开始考虑以arr[i+1]开头的满足条件的子数组数量，更新qmin、qmax。接下来的过程和上述一样。<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#python3.5</span><br><span class="line">def getNum(arr, num):</span><br><span class="line">    if arr == None or len(arr) == 0:</span><br><span class="line">        return 0</span><br><span class="line">    qmin = []</span><br><span class="line">    qmax = []</span><br><span class="line">    i = 0</span><br><span class="line">    j = 0</span><br><span class="line">    res = 0</span><br><span class="line">    while i &lt; len(arr):</span><br><span class="line">        while j &lt; len(arr):</span><br><span class="line">            while qmin and arr[qmin[-1]] &gt; arr[j]:</span><br><span class="line">                qmin.pop()</span><br><span class="line">            qmin.append(j)</span><br><span class="line">            while qmax and arr[qmax[-1]] &lt; arr[j]:</span><br><span class="line">                qmax.pop()</span><br><span class="line">            qmax.append(j)</span><br><span class="line">            if arr[qmax[0]] - arr[qmin[0]] &gt; num:</span><br><span class="line">                break</span><br><span class="line">            j += 1</span><br><span class="line">        if qmin[0] == i:</span><br><span class="line">            qmin.pop(0)</span><br><span class="line">        if qmax[0] == i:</span><br><span class="line">            qmax.pop(0)</span><br><span class="line">        res += j - i</span><br><span class="line">        i += 1</span><br><span class="line">    return res</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pyhton </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 栈和队列 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>求最大子矩阵的大小</title>
      <link href="/2018/07/17/maxRecSize/"/>
      <url>/2018/07/17/maxRecSize/</url>
      <content type="html"><![CDATA[<p>【题目】</p><p>　　给定一个整型矩阵map，其中的值只有0和1两种，求其中全是1的所有矩形区域中，最大的矩形区域为1的数量。<br>　　例如：<br>　　1　0　1　1<br>　　1　1　1　1<br>　　1　1　1　0<br>　　其中，最大的矩形区域有6个1，所以返回6.</p><p>【题目】</p><p>　　如果矩阵的大小是O(N<em>M)，本题可以做到时间复杂度为O(N</em>M)。<br>1、矩阵的行数是N，以每一行做切割，统计以当前行作为底的情况下，每个位置往上连续1的数量。使用高度数组height来表示。<br>　　例如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">　　map = 1　0　1　1 </span><br><span class="line">　　　 　　1　1　1　1 </span><br><span class="line">　　　　 　1　1　1　0 </span><br><span class="line">　　以第一行做切割后，height = &#123;1, 0, 1, 1&#125;. </span><br><span class="line">　　以第二行做切割后，height = &#123;2, 1, 2, 2&#125;. </span><br><span class="line">　　以第三行做切割后，height = &#123;3, 2, 3, 0&#125;.</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>2、对于height数组，我们可以将其想象成一个直方图，要求最大的子矩阵，实际上就是对以每一行为底的直方图，其最大矩阵面积。如果我们能求出以每一个柱子扩展出去的最大矩形，那么其中最大的矩形就是我们想要的。</p><p>　　如果要求一个柱子a扩展出去的最大矩形，实际上就是求这个柱子左边第一个比它低的柱子b以及右边第一个比它低的柱子c，那么b和c之间的柱子数×a柱子的高度，就是答案。问题的关键就在于如何快速的找到柱子b和c。方法如下：<br>　　<br>　　使用一个栈，从左到右遍历数组height，假设遍历到的位置为i，如果栈为空或者栈顶所对应的元素小于height[i]，直接将 i 压入栈中；否则将栈中大于height[i]的元素全部出栈，然后压入 i。对于栈中的每一个元素，左边第一个比它小的数的位置就是栈中上一个元素，右边第一个比它小（或者等于）的数的位置就是使它出栈的数的位置，如果没有数使它出栈，说明它右边没有比它小的数。</p><p>　　以[1,3,2]为例，首先1入栈，接下来3比1大，直接入栈，并且确定了3左边第一个比它小的数是1；接下来2比3小，3出栈，同时可以确定3右边第一个比它小的数是2；接下来2比1大，2入栈，并且确定了2左边第一个比它小的数是1。此时栈中的元素为[1,2]，没有数使它们出栈，所以1和2右边都没有比它小的数。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#python3.5</span><br><span class="line">def maxRecSize(map):</span><br><span class="line">    def maxRecFromBottom(height):</span><br><span class="line">        if height == None or len(height) == 0:</span><br><span class="line">            return 0</span><br><span class="line">        stack = []</span><br><span class="line">        maxArea = 0</span><br><span class="line">        for i in range(len(height)):</span><br><span class="line">            while stack and height[stack[-1]] &gt;= height[i]:</span><br><span class="line">                j = stack.pop()</span><br><span class="line">                k = stack[-1] if stack else -1</span><br><span class="line">                maxArea = max(maxArea, (i-k-1) * height[j])</span><br><span class="line">            stack.append(i)</span><br><span class="line">        while stack:</span><br><span class="line">            j = stack.pop()</span><br><span class="line">            k = stack[-1] if stack else -1</span><br><span class="line">            maxArea = max(maxArea, (len(height)-k-1) * height[j])</span><br><span class="line">        return maxArea</span><br><span class="line"></span><br><span class="line">    if map == None or len(map) == 0 or len(map[0]) == 0:</span><br><span class="line">        return 0</span><br><span class="line">    height = [0 for i in range(len(map[0]))]</span><br><span class="line">    maxArea = 0</span><br><span class="line">    for i in range(len(map)):</span><br><span class="line">        for j in range(len(map[0])):</span><br><span class="line">            height[j] = 0 if map[i][j] == 0 else height[j] + 1</span><br><span class="line">        maxArea = max(maxArea, maxRecFromBottom(height))</span><br><span class="line">    return maxArea</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pyhton </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 栈和队列 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>构造数组的MaxTree</title>
      <link href="/2018/07/14/getMaxTree/"/>
      <url>/2018/07/14/getMaxTree/</url>
      <content type="html"><![CDATA[<p>【题目】</p><p>　　定义二叉树节点如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Node:</span><br><span class="line">    def __init__(self, value):</span><br><span class="line">        self.value = value</span><br><span class="line">        self.left = None</span><br><span class="line">        self.right = None</span><br></pre></td></tr></table></figure></p><p>　　一个数组的MaxTree定义如下：<br>　　1、数组中必须没有重复元素<br>　　2、MaxTree是一棵二叉树，数组的每一个值对应一个二叉树的节点<br>　　3、包括MaxTree树在内且在其中的每一棵子树上，值最大的节点就是树的头。<br>　　给定一个没有重复元素的数组arr，写出生成这个数组的MaxTree的函数，要求如果数组长度为N，则时间复杂度为O(N)、额外空间复杂度为O(N)。<br><a id="more"></a><br>【基本思路】</p><p>　　使用以下原则建立这棵树：<br>　　<br>　　1、每一个数的父节点是它左边第一个比它大的数和它右边第一个比它大的数中，较小的一个。<br>　　2、如果一个数左边没有比它大的数，右边也没有，那么这个数就是整个数组中的最大值，那么这个数是MaxTree的头节点。</p><p>　　接下来的只要知道每一个数左边比它大的数以及右边比它大的数，剩下的工作就很好实现了。如何实现呢？使用栈。<br>　　<br>　　从左到右遍历数组arr，假设遍历到的位置为i，如果栈为空或者栈顶元素大于arr[i]，直接将arr[i]压入栈中；否则将栈中小于arr[i]的元素全部出栈，然后压入arr[i]。同时，栈中元素的左边第一个比它大的数就是它相邻的数，右边第一个比它大的数就是使它出栈的数，如果没有数使它出栈，说明它右边没有比它大的数。</p><p>　　以[3,1,2]为例，首先3入栈，接下来1比3小，直接入栈，并且确定了1左边第一个比它大的数是3；接下来2比1大，1出栈，同时可以确定1右边第一个比它大的数是2；接下来2比3小，2入栈，并且确定了2左边第一个比它大的数是3。此时栈中的元素为[3,2]，没有数使它们出栈，所以3和2右边都没有比它大的数。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#python3.5</span><br><span class="line">class Node:</span><br><span class="line">    def __init__(self, value):</span><br><span class="line">        self.value = value</span><br><span class="line">        self.left = None</span><br><span class="line">        self.right = None</span><br><span class="line"></span><br><span class="line">def getMaxTree(arr):</span><br><span class="line">    nArr = [Node(arr[i]) for i in range(len(arr))]</span><br><span class="line">    lBigMap = &#123;&#125;</span><br><span class="line">    rBigMap = &#123;&#125;</span><br><span class="line">    stack = []</span><br><span class="line">    for i in range(len(nArr)):</span><br><span class="line">        curNode = nArr[i]</span><br><span class="line">        while stack and stack[-1].value &lt; curNode.value:</span><br><span class="line">            cur = stack.pop()</span><br><span class="line">            lBigMap[cur] = stack[-1] if stack else None</span><br><span class="line">            rBigMap[cur] = curNode</span><br><span class="line">        stack.append(curNode)</span><br><span class="line">    while stack:</span><br><span class="line">        cur = stack.pop()</span><br><span class="line">        lBigMap[cur] = stack[-1] if stack else None</span><br><span class="line">        rBigMap[cur] = None</span><br><span class="line">    head = None</span><br><span class="line">    for i in range(len(nArr)):</span><br><span class="line">        curNode = nArr[i]</span><br><span class="line">        left = lBigMap[curNode]</span><br><span class="line">        right = rBigMap[curNode]</span><br><span class="line">        if left == None and right == None:</span><br><span class="line">            head = curNode</span><br><span class="line">        elif left == None:</span><br><span class="line">            if right.left == None:</span><br><span class="line">                right.left = curNode</span><br><span class="line">            else:</span><br><span class="line">                right.right = curNode</span><br><span class="line">        elif right == None:</span><br><span class="line">            if left.left == None:</span><br><span class="line">                left.left = curNode</span><br><span class="line">            else:</span><br><span class="line">                left.right = curNode</span><br><span class="line">        else:</span><br><span class="line">            parent = left if left.value &lt; right.value else right</span><br><span class="line">            if parent.left == None:</span><br><span class="line">                parent.left = curNode</span><br><span class="line">            else:</span><br><span class="line">                parent.right = curNode</span><br><span class="line">    return head</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pyhton </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 栈和队列 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>生成窗口最大值数组</title>
      <link href="/2018/07/13/getMaxWindow/"/>
      <url>/2018/07/13/getMaxWindow/</url>
      <content type="html"><![CDATA[<p>【题目】</p><p>　　有一个整型数组arr和一个大小为w的窗口从数组的最左边滑到最右边，窗口每次向右滑动一个位置。<br>　　<br>　　例如，数组为[4,3,5,4,3,3,6,7]，窗口大小为3时：依次出现的窗口为[4,3,5], [3,5,4], [5,4,3], [4,3,3], [3,3,6], [3,6,7]。</p><p>　　如果数组长度是n，窗口大小是w，则一共产生n-w+1个窗口。<br>　　<br>　　请实现一个函数。</p><p>　　1、输入：整型数组arr，窗口大小w<br>　　2、输出：一个长度大小为n-w+1的数组res，res[i]表示每一种窗口下的最大值。例如上面的例子，应该返回[5,5,5,4,6,7]。</p><p>【基本思路】</p><p>　　使用双端队列，遍历一遍数组，假设遍历到的位置是 i，如果队列为空或者队尾所对应的元素大于arr[i]，将位置 i 压入队列；否则将队尾元素弹出，再将 i 压入队列。此时，判断队头元素是否等于i - w，如果是的话说明此时队头已经不在当前窗口的范围内，删去。这样，这个队列就成了一个维护窗口为w的子数组的最大值更新的结构，队头元素就是每个窗口的最大值。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#python3.5</span><br><span class="line">def getMaxWindow(arr, w):</span><br><span class="line">    if arr == None or w &lt; 1 or len(arr) &lt; w:</span><br><span class="line">        return</span><br><span class="line">    deque = []</span><br><span class="line">    res = []</span><br><span class="line">    for i in range(len(arr)):</span><br><span class="line">        while deque and arr[deque[-1]] &lt;= arr[i]:</span><br><span class="line">            deque.pop()</span><br><span class="line">        deque.append(i)</span><br><span class="line">        if deque[0] &lt;= i - w:</span><br><span class="line">            deque.pop(0)</span><br><span class="line">        if i-w+1 &gt;= 0:</span><br><span class="line">            res.append(arr[deque[0]])</span><br><span class="line">    return res</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pyhton </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 栈和队列 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用一个栈实现另一个栈的排序</title>
      <link href="/2018/07/12/sortByStack/"/>
      <url>/2018/07/12/sortByStack/</url>
      <content type="html"><![CDATA[<p>【题目】</p><p>　　一个栈中元素的类型是整型，现在想将该栈从顶到底按从大到小的顺序排序，只许申请一个栈。除此之外，可以申请新的变量，但不能申请额外的数据结构。如何完成排序？</p><p>【基本思路】</p><p>　　不断将栈顶元素cur弹出，如果新栈为空、或者新栈栈顶元素大于cur，直接将cur压入新栈中；否则，将新栈中的元素逐一弹出压回原来的栈中，直到新栈的栈顶元素大于cur，再将cur压入新栈中.继续弹出原来栈的栈顶元素，重复上述操作即可。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#python3.5</span><br><span class="line">def sortByStack(stack):</span><br><span class="line">    if len(stack) &lt; 2:</span><br><span class="line">        return stack</span><br><span class="line">    stack1 = []</span><br><span class="line">    while stack:</span><br><span class="line">        cur = stack.pop()</span><br><span class="line">        while len(stack1) != 0 and stack1[-1] &lt; cur:</span><br><span class="line">            stack.push(stack1.pop())</span><br><span class="line">        stack1.push(cur)</span><br><span class="line">    while stack1:</span><br><span class="line">        stack.append(stack1.pop())</span><br><span class="line">    return stack</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pyhton </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 栈和队列 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>猫狗队列</title>
      <link href="/2018/07/11/CatDogQueue/"/>
      <url>/2018/07/11/CatDogQueue/</url>
      <content type="html"><![CDATA[<p>【题目】</p><p>　　实现一种狗猫队列的结构， 要求如下： 用户可以调用add方法将cat类或dog类的实例放入队列中； 用户可以调用pollAll方法， 将队列中所有的实例按照进队列的先后顺序依次弹出； 用户可以调用pollDog方法， 将队列中dog类的实例按照进队列的先后顺序依次弹出； 用户可以调用pollCat方法， 将队列中cat类的实例按照进队列的先后顺序依次弹出； 用户可以调用isEmpty方法， 检查队列中是否还有dog或cat的实例； 用户可以调用isDogEmpty方法， 检查队列中是否有dog类的实例； 用户可以调用isCatEmpty方法， 检查队列中是否有cat类的实例。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#python3.5</span><br><span class="line">class Pet(object):</span><br><span class="line">    def __init__(self, type):</span><br><span class="line">        self.type = type</span><br><span class="line"></span><br><span class="line">    def get_pet(self):</span><br><span class="line">        return self.type</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return self.type</span><br><span class="line"></span><br><span class="line">class Dog(Pet):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        Pet.__init__(self, &apos;dog&apos;)</span><br><span class="line"></span><br><span class="line">class Cat(Pet):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        Pet.__init__(self, &apos;cat&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class PetCount(object):</span><br><span class="line">    def __init__(self, pet, count):</span><br><span class="line">        self.pet = pet</span><br><span class="line">        self.count = count</span><br><span class="line"></span><br><span class="line">    def get_count(self):</span><br><span class="line">        return self.count</span><br><span class="line"></span><br><span class="line">    def get_pet(self):</span><br><span class="line">        return self.pet</span><br><span class="line"></span><br><span class="line">    def get_type(self):</span><br><span class="line">        return self.pet.type</span><br><span class="line"></span><br><span class="line">class CatDogQueue(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.dog_queue = []</span><br><span class="line">        self.cat_queue = []</span><br><span class="line">        self.count = 0</span><br><span class="line"></span><br><span class="line">    def add(self, pet):</span><br><span class="line"></span><br><span class="line">        if pet.type == &apos;dog&apos;:</span><br><span class="line">            self.count += 1</span><br><span class="line">            pet_count = PetCount(pet, self.count)</span><br><span class="line">            self.dog_queue.append(pet_count)</span><br><span class="line">        elif pet.type == &apos;cat&apos;:</span><br><span class="line">            self.count += 1</span><br><span class="line">            pet_count = PetCount(pet, self.count)</span><br><span class="line">            self.cat_queue.append(pet_count)</span><br><span class="line">        else:</span><br><span class="line">            raise RuntimeError(&apos;no pet type&apos;)</span><br><span class="line"></span><br><span class="line">    def pull_all(self):</span><br><span class="line">        if not self.is_empty():</span><br><span class="line">            if self.is_cat_queue_empty():</span><br><span class="line">                count_dog = self.dog_queue.pop(0)</span><br><span class="line">                return count_dog.get_pet()</span><br><span class="line">            elif self.is_dog_queue_empty():</span><br><span class="line">                count_cat = self.cat_queue.pop(0)</span><br><span class="line">                return count_cat.get_pet()</span><br><span class="line">            else:</span><br><span class="line">                count_dog = self.dog_queue[0]</span><br><span class="line">                count_cat = self.cat_queue[0]</span><br><span class="line">                if count_cat.get_count() &lt; count_dog.get_count():</span><br><span class="line">                    self.cat_queue.pop(0)</span><br><span class="line">                    return count_cat.get_pet()</span><br><span class="line">                else:</span><br><span class="line">                    self.dog_queue.pop(0)</span><br><span class="line">                    return count_dog.get_pet()</span><br><span class="line">        else:</span><br><span class="line">            raise RuntimeError(&apos;queue is empty&apos;)</span><br><span class="line"></span><br><span class="line">    def pull_dog(self):</span><br><span class="line">        if not self.is_dog_queue_empty():</span><br><span class="line">            return self.dog_queue.pop(0).get_pet()</span><br><span class="line">        else:</span><br><span class="line">            raise RuntimeError(&apos;dog queue is empty&apos;)</span><br><span class="line"></span><br><span class="line">    def pull_cat(self):</span><br><span class="line">        if not self.is_cat_queue_empty():</span><br><span class="line">            return self.cat_queue.pop(0).get_pet()</span><br><span class="line">        else:</span><br><span class="line">            raise RuntimeError(&apos;dog queue is empty&apos;)</span><br><span class="line"></span><br><span class="line">    def is_empty(self):</span><br><span class="line">        return self.is_cat_queue_empty() and self.is_dog_queue_empty()</span><br><span class="line"></span><br><span class="line">    def is_dog_queue_empty(self):</span><br><span class="line">        return not self.dog_queue</span><br><span class="line"></span><br><span class="line">    def is_cat_queue_empty(self):</span><br><span class="line">        return not self.cat_queue</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pyhton </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 栈和队列 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计一个有getMin功能的栈</title>
      <link href="/2018/07/10/getMin/"/>
      <url>/2018/07/10/getMin/</url>
      <content type="html"><![CDATA[<p>【题目】</p><p>　　实现一个特殊的栈，在实现栈的基本功能的基础上，再实现返回栈中最小元素的操作。</p><p>【要求】</p><p>　　1、 pop、push、getMin操作的时间复杂度都是O(1)<br>　　2.、设计的栈类型可以使用现成的栈结构<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#python3.5</span><br><span class="line">class NewStack1:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.stackData = []</span><br><span class="line">        self.stackMin = []</span><br><span class="line"></span><br><span class="line">    def push(self, newNum):</span><br><span class="line">        self.stackData.append(newNum)</span><br><span class="line">        if len(self.stackMin) == 0 or newNum &lt;= self.getMin():</span><br><span class="line">            self.stackMin.append(newNum)</span><br><span class="line"></span><br><span class="line">    def pop(self):</span><br><span class="line">        if len(self.stackData) == 0:</span><br><span class="line">            raise Exception(&quot;stack is empty!&quot;)</span><br><span class="line">        value = self.stackData.pop()</span><br><span class="line">        if self.getMin() == value:</span><br><span class="line">            self.stackMin.pop()</span><br><span class="line">        return value</span><br><span class="line"></span><br><span class="line">    def getMin(self):</span><br><span class="line">        if len(self.stackMin) == 0:</span><br><span class="line">            raise Exception(&quot;stack is empty!&quot;)</span><br><span class="line">        return self.stackMin[-1]</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pyhton </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 栈和队列 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
